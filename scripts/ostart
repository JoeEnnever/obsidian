#!/usr/bin/env python
from ocommon import *
import ConfigParser
from ConfigParser import NoOptionError
import sys
import argparse
"""
Starts a Java program defined by file 'cnf'.
"""
def ostart():
    parser = argparse.ArgumentParser(description='Starts the process named by \'appid\'')
    parser.add_argument('appid', metavar='appid', type=str)
    parser.add_argument('--dry-run', '-d', action='store_true')
    parser.add_argument('--file', '-f', dest='conf_file', type=str)

    args = parser.parse_args()
    appid = args.appid
    conf_file = args.conf_file

    if conf_file:
        conf_file = open(conf_file, 'r')
    else:
        conf_file = find_conf_file()

    if not conf_file:
        raise ConfigError('could not find config file')
        
    if appid:
        print "starting [%s]" % appid
    else:
        print "appid required"
        exit(1)

    config = ConfigParser.ConfigParser()
    config.readfp(conf_file)

    # get the config file defaults out first, and recreate
    # the config, providing those
    defaults = dict(config.items('default'))
    config = ConfigParser.ConfigParser(defaults)

    #readfp reads the whole file, must rewind
    conf_file.seek(0)
    config.readfp(conf_file)

    java_cmd = config.get(appid, 'java_home') + "/bin/java"
    classpath = config.get(appid, 'classpath')
    class_ = config.get(appid, 'class')
    
    #for compatability with flint, try both java_opts
    #and opts.
    jvm_opts = ''
    if config.has_option(appid, 'java_opts'):
        jvm_opts = config.get(appid,'java_opts')
    elif config.has_option(appid, 'opts'):
        jvm_opts = config.get(appid, 'opts')
    jvm_opts = jvm_opts.split(' ')

    if config.has_option(appid, 'system_opts'):
        system_opts = config.get(appid, 'system_opts')
        system_opts = system_opts.split(' ')
    else:
        system_opts = []

    if config.has_option(appid, 'args'):
        app_args = config.get(appid, 'args')
        app_args = app_args.split(' ')
    else:
        app_args = []
    
    if config.has_option(appid, 'env'):
        env = config.get(appid, 'env')
        set_env(env)
            

    c_args = []
    c_args.append(java_cmd)
    c_args.extend(jvm_opts)
    c_args.append("-classpath")
    c_args.append(classpath)
    c_args.extend(system_opts)
    c_args.append(class_)
    c_args.extend(app_args)
    #Expand environment variables
    c_args = [os.path.expandvars(x) for x in c_args if x]
    #print " ".join(args)
    if args.dry_run:
       print " ".join(c_args)
       return
    print(c_args)
    os.execv(c_args[0], c_args)

if __name__ == "__main__":
    try:
        ostart()
    except ConfigError as e:
        print e.message 
    except NoOptionError as e:
        print e.message
